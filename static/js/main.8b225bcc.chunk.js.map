{"version":3,"sources":["config.js","components/table/index.js","App.js","serviceWorker.js","index.js","assets/up.png","assets/down.png","assets/skeleton.gif"],"names":["ConfigData","url","DataTable","classes","this","props","react_default","a","createElement","Paper_default","className","root","tableWrapper","Table_default","table","TableHead_default","TableRow_default","TableCell_default","align","TableBody_default","children","React","Component","withStyles","theme","width","marginTop","spacing","unit","minWidth","overflowX","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","data","_this2","socket","WebSocket","onmessage","event","JSON","parse","forEach","_ref","_ref2","slicedToArray","name","price","setState","prevstate","objectSpread","defineProperty","pricedata","updatePriceData","diff","lastUpdated","updateTime","prevTime","now","Date","push","length","splice","style","marginBottom","react","fallback","src","loader","alt","keys","map","key","index","count","component","scope","up","down","height","Number","parseFloat","toFixed","build","limit","margin","color","type","lib_default","date","backgroundColor","position","minHeight","bottom","display","justifyContent","alignItems","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8b225bcc.chunk.js","sourcesContent":["const ConfigData = {\n\turl: \"ws://stocks.mnet.website\"\n};\n\nexport default ConfigData;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst styles = theme => ({\n\troot: {\n\t\twidth: \"100%\",\n\t\tmarginTop: theme.spacing.unit * 3\n\t},\n\ttable: {\n\t\tminWidth: 500\n\t},\n\ttableWrapper: {\n\t\toverflowX: \"auto\"\n\t}\n});\n\nclass DataTable extends React.Component {\n\trender() {\n\t\tconst { classes } = this.props;\n\t\treturn (\n\t\t\t<Paper className={classes.root}>\n\t\t\t\t<div className={classes.tableWrapper}>\n\t\t\t\t\t<Table className={classes.table}>\n\t\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t<TableCell>Stock</TableCell>\n\t\t\t\t\t\t\t\t<TableCell align=\"right\">Price (in $)</TableCell>\n\t\t\t\t\t\t\t\t<TableCell align=\"right\">Difference</TableCell>\n\t\t\t\t\t\t\t\t<TableCell align=\"right\">Graph</TableCell>\n\t\t\t\t\t\t\t\t<TableCell align=\"right\">Last updated</TableCell>\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t<TableBody>{this.props.children}</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</div>\n\t\t\t</Paper>\n\t\t);\n\t}\n}\n\nDataTable.propTypes = {\n\tclasses: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(DataTable);\n","import React, { Component, Suspense } from \"react\";\nimport \"./App.scss\";\nimport ConfigData from \"./config\";\nimport DataTable from \"./components/table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport {\n\tSparklines,\n\tSparklinesLine,\n\tSparklinesReferenceLine\n} from \"react-sparklines\";\nimport up from \"./assets/up.png\";\nimport down from \"./assets/down.png\";\nimport loader from \"./assets/skeleton.gif\";\nimport TimeAgo from \"react-timeago\";\nexport default class App extends Component {\n\tsocket;\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tdata: {}\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\tthis.socket = new WebSocket(ConfigData.url);\n\t\tthis.socket.onmessage = event => {\n\t\t\tlet Data = JSON.parse(event.data);\n\t\t\tData.forEach(([name, price]) => {\n\t\t\t\tthis.setState(prevstate => ({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t...prevstate.data,\n\t\t\t\t\t\t[name]: {\n\t\t\t\t\t\t\tprice,\n\t\t\t\t\t\t\tpricedata: prevstate.data[name]\n\t\t\t\t\t\t\t\t? this.updatePriceData(prevstate.data[name].pricedata, price)\n\t\t\t\t\t\t\t\t: [],\n\t\t\t\t\t\t\tdiff: prevstate.data[name]\n\t\t\t\t\t\t\t\t? prevstate.data[name].price - price\n\t\t\t\t\t\t\t\t: 0,\n\t\t\t\t\t\t\tlastUpdated: prevstate.data[name]\n\t\t\t\t\t\t\t\t? this.updateTime(\n\t\t\t\t\t\t\t\t\t\tprevstate.data[name].lastUpdated,\n\t\t\t\t\t\t\t\t\t\tprevstate.data[name].diff\n\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t: 0\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t});\n\t\t};\n\t}\n\tupdateTime(prevTime, diff) {\n\t\tlet now = Date.now();\n\t\tnow = new Date(now);\n\t\tif (diff === 0) {\n\t\t\treturn prevTime;\n\t\t}\n\t\treturn now;\n\t}\n\tupdatePriceData(pricedata, price) {\n\t\tpricedata.push(price);\n\t\tif (pricedata.length > 5) {\n\t\t\tpricedata.splice(0, pricedata.length - 5);\n\t\t}\n\t\treturn pricedata;\n\t}\n\trender() {\n\t\tconst { data } = this.state;\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h2>Live Stocks App</h2>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"container\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tmarginBottom: \"100px\"\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Suspense fallback={<image src={loader} alt=\"app is loading\" />}>\n\t\t\t\t\t\t<DataTable>\n\t\t\t\t\t\t\t{Object.keys(data).map((key, index) => (\n\t\t\t\t\t\t\t\t<TableRow key={index} count={Object.keys(data).length}>\n\t\t\t\t\t\t\t\t\t<TableCell component=\"th\" scope=\"row\">\n\t\t\t\t\t\t\t\t\t\t{key}{\" \"}\n\t\t\t\t\t\t\t\t\t\t{data[key].diff !== 0 ? (\n\t\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\t\tsrc={data[key].diff <= 0 ? up : down}\n\t\t\t\t\t\t\t\t\t\t\t\theight={15}\n\t\t\t\t\t\t\t\t\t\t\t\twidth={15}\n\t\t\t\t\t\t\t\t\t\t\t\talt=\"Logo\"\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t` `\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t<TableCell align=\"right\">\n\t\t\t\t\t\t\t\t\t\t{Number.parseFloat(data[key].price).toFixed(2)}\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t<TableCell align=\"right\">\n\t\t\t\t\t\t\t\t\t\t{Number.parseFloat(data[key].diff).toFixed(2)}\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t<TableCell align=\"right\">\n\t\t\t\t\t\t\t\t\t\t<Sparklines\n\t\t\t\t\t\t\t\t\t\t\tdata={data[key].pricedata}\n\t\t\t\t\t\t\t\t\t\t\tlimit={5}\n\t\t\t\t\t\t\t\t\t\t\twidth={100}\n\t\t\t\t\t\t\t\t\t\t\theight={20}\n\t\t\t\t\t\t\t\t\t\t\tmargin={5}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<SparklinesLine color=\"blue\" />\n\t\t\t\t\t\t\t\t\t\t\t<SparklinesReferenceLine type=\"mean\" />\n\t\t\t\t\t\t\t\t\t\t</Sparklines>\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t<TableCell align=\"right\">\n\t\t\t\t\t\t\t\t\t\t{data[key].lastUpdated !== 0 ? (\n\t\t\t\t\t\t\t\t\t\t\t<TimeAgo date={data[key].lastUpdated} />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t`Not updated yet.`\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</DataTable>\n\t\t\t\t\t</Suspense>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundColor: \"#f3f3f3\",\n\t\t\t\t\t\tposition: \"fixed\",\n\t\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\t\tminHeight: \"50px\",\n\t\t\t\t\t\tbottom: 0,\n\t\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\t\talignItems: \"center\"\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<span>created by Vishnuprasad</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/up.7420f2b2.png\";","module.exports = __webpack_public_path__ + \"static/media/down.0bb70c9d.png\";","module.exports = __webpack_public_path__ + \"static/media/skeleton.ff158f20.gif\";"],"sourceRoot":""}